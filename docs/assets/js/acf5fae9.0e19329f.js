"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[29569],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),g=c(n),d=o,m=g["".concat(s,".").concat(d)]||g[d]||u[d]||l;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},98389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>d,default:()=>y,frontMatter:()=>g,metadata:()=>m,toc:()=>k});var r=n(3905),o=Object.defineProperty,l=Object.defineProperties,a=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&p(e,n,t[n]);if(i)for(var n of i(t))c.call(t,n)&&p(e,n,t[n]);return e};const g={id:"logs",title:"Logs",sidebar_label:"Logs"},d=void 0,m={unversionedId:"monitoring/logs",id:"monitoring/logs",title:"Logs",description:"Viewing logs",source:"@site/mosquitto/monitoring/logs.md",sourceDirName:"monitoring",slug:"/monitoring/logs",permalink:"/documentation-staging/mosquitto/next/monitoring/logs",draft:!1,tags:[],version:"current",frontMatter:{id:"logs",title:"Logs",sidebar_label:"Logs"}},f={},k=[{value:"Viewing logs",id:"viewing-logs",level:2},{value:"Docker",id:"docker",level:3},{value:"RPM",id:"rpm",level:3},{value:"Log storage",id:"log-storage",level:2},{value:"Docker",id:"docker-1",level:3},{value:"Integration with external log management",id:"integration-with-external-log-management",level:4},{value:"RPM",id:"rpm-1",level:3}],v={toc:k};function y(e){var t,n=e,{components:o}=n,p=((e,t)=>{var n={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&i)for(var r of i(e))t.indexOf(r)<0&&c.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=u(u({},v),p),l(t,a({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("h2",u({},{id:"viewing-logs"}),"Viewing logs"),(0,r.kt)("h3",u({},{id:"docker"}),"Docker"),(0,r.kt)("p",null,"To view logs for a specific container:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"docker logs <container_name>\n")),(0,r.kt)("p",null,"For real-time log output:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"docker logs -f <container_name>\n")),(0,r.kt)("p",null,"To see logs for a specific service when using Docker Compose:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"docker-compose logs <service_name>\n")),(0,r.kt)("p",null,"or for all services:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"docker-compose logs\n")),(0,r.kt)("h3",u({},{id:"rpm"}),"RPM"),(0,r.kt)("p",null,"You can view logs for a specific service with:\n",(0,r.kt)("inlineCode",{parentName:"p"},"journalctl -u <service-name>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"mosquitto"),(0,r.kt)("li",{parentName:"ul"},"mosquitto-platform")),(0,r.kt)("h2",u({},{id:"log-storage"}),"Log storage"),(0,r.kt)("h3",u({},{id:"docker-1"}),"Docker"),(0,r.kt)("p",null,"By default, Docker stores logs in JSON format under ",(0,r.kt)("inlineCode",{parentName:"p"},"/var/lib/docker/containers/<container-id>/"),".\nThese logs are persisted as long as the container exists and disk space is available.\nThe default logging driver is json-file, but you can configure other drivers, e.g., syslog, journald, etc."),(0,r.kt)("p",null,"Filtering, tailing, and searching logs\nSee last 100 lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"docker logs --tail 100 <container_name>\n")),(0,r.kt)("p",null,"View logs since a specific time:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),'docker logs --since "2025-08-18T10:00:00" <container_name>\n')),(0,r.kt)("p",null,"Filter logs by pattern with grep:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),'docker logs <container_name> | grep "PATTERN"\n')),(0,r.kt)("h4",u({},{id:"integration-with-external-log-management"}),"Integration with external log management"),(0,r.kt)("p",null,"For centralized log storage (like with journald/rsyslog), configure Docker\u2019s logging driver to e.g. syslog or journald:"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"docker run --log-driver=syslog ...\n")),(0,r.kt)("h3",u({},{id:"rpm-1"}),"RPM"),(0,r.kt)("p",null,"By default, logs are stored under ",(0,r.kt)("inlineCode",{parentName:"p"},"/run/log/journal/"),"."),(0,r.kt)("p",null,"These logs are in binary format and are not persisted across server reboots."),(0,r.kt)("p",null,"To enable persistence, ",(0,r.kt)("inlineCode",{parentName:"p"},"journald")," must be configured accordingly (e.g., by enabling persistent storage). In that case, logs will be written to ",(0,r.kt)("inlineCode",{parentName:"p"},"/var/log/journal/"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Integration with rsyslog:"),"\nBy default, the rsyslog daemon pulls logs from systemd\u2019s journal via the imjournal module. These logs are collected in plaintext under: ",(0,r.kt)("inlineCode",{parentName:"p"},"/var/log/messages"),"\nYou can adjust this behavior in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/rsyslog.conf"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Custom plaintext log files:"),"\nIf you need logs written directly to custom plaintext files (instead of being managed by journald), you can override the service configuration. For example:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"systemctl edit mosquitto-platform"),"\nor\n",(0,r.kt)("inlineCode",{parentName:"p"},"systemctl edit mosquitto")),(0,r.kt)("p",null,"Then add:\n\xb4\xb4\xb4\n","[Service]","\nStandardOutput=append:/path/to/your/stdout.log\nStandardError=append:/path/to/your/stderr.log"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"#### Log rotation:\nSince custom log files can grow quickly, they should be managed with a log rotation tool such as `logrotate` to prevent uncontrolled disk usage.\n")))}y.isMDXComponent=!0}}]);