"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[41724],{83166:(e,n,t)=>{var i=t(64836);n.Z=void 0;var o=i(t(64938)),a=t(85893),r=(0,o.default)((0,a.jsx)("path",{d:"M12 2 4 5v6.09c0 5.05 3.41 9.76 8 10.91 4.59-1.15 8-5.86 8-10.91V5l-8-3zm-1.06 13.54L7.4 12l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41-5.64 5.66z"}),"GppGood");n.Z=r},27922:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>y,default:()=>w,frontMatter:()=>b,metadata:()=>M,toc:()=>v});var i=t(3905),o=t(49044),a=t(67294);function r({schema:e}){const n=(e,t,i,o)=>(Object.entries(null==t?void 0:t.properties).forEach((([t,r])=>{switch(e.push(a.createElement("tr",{key:i.index,style:{backgroundColor:"transparent"}},a.createElement("td",{style:{paddingLeft:10+20*o+"px"}},t),a.createElement("td",null,r.type),a.createElement("td",null,""),a.createElement("td",null,r.description))),i.index+=1,r.type){case"array":return void(r.items.properties&&(e.push(a.createElement("tr",{key:i.index,style:{backgroundColor:"transparent"}},a.createElement("td",{colSpan:4,style:{backgroundColor:"#666",color:"white",paddingLeft:10+20*o+"px"}},`Array Item for ${t}:`))),n(e,r.items,i,o+1)));case"object":return e.push(a.createElement("tr",{key:i.index,style:{backgroundColor:"transparent"}},a.createElement("td",{colSpan:4,style:{backgroundColor:"#666",color:"white",paddingLeft:10+20*o+"px"}},`Object Properties for ${t}:`))),i.index+=1,n(e,r,i,o+1),e.push(a.createElement("tr",{key:i.index,style:{backgroundColor:"transparent"}},a.createElement("td",{colSpan:4},""))),void(i.index+=1)}})),e);return e?a.createElement(a.Fragment,null,a.createElement("p",null,"The config file contains a JSON of the following structure:"),a.createElement("table",{style:{width:"100%",display:"table"}},a.createElement("thead",null,a.createElement("tr",null,a.createElement("td",{style:{width:"20%"}},"Name"),a.createElement("td",{style:{width:"10%"}},"Type"),a.createElement("td",{style:{width:"10%"}},"Required"),a.createElement("td",{style:{width:"60%"}},"Description"))),a.createElement("tbody",null,n([],"object"===e.type?e:e.items,{index:0},0))),a.createElement("p",null,"Further details can be viewed in the JSON Schema section below.")):null}var s=t(29473);const p=JSON.parse('{"type":"object","description":"Config object representing the MongoDB-Bridge configuration.","properties":{"version":{"description":"Version of the configuration schema","type":"string"},"connections":{"type":"array","description":"Array of sub-configurations per MongoDB connection/database.","items":{"properties":{"name":{"type":"string","description":"Textual identifier of this configuration."},"connection":{"type":"object","description":"MongoDB server specific configurations.1","properties":{"connectionURI":{"type":"string","description":"MongoDB connection string that contains protocol, hostname, port, database name, optional credentials and options."},"hostname":{"type":"string","description":"Hostname or IP address of the MongoDB server."},"port":{"type":"integer","description":"Port the MongoDB server is listening on."},"database":{"type":"string","description":"Name of the database, the data should be inserted to."},"credentials":{"type":"object","description":"Basic authentication configuration.","properties":{"username":{"type":"string"},"password":{"type":"string"}}}},"oneOf":[{"required":["hostname","port","database"]},{"required":["connectionURI"]}]},"options":{"type":"object","description":"Options to configure queueing and publish retry mechanism.","properties":{"maxQueuedMessages":{"type":"integer","minimum":1,"description":"Specifies the limit of not-yet-processed/inserted MQTT messages, before the plugin starts to drop them."},"retryInsertMinDelay":{"type":"integer","default":0,"minimum":1,"description":"Initial delay in milliseconds before the plugin tries to insert a message again, once the server returned an error or was not available. The increment follows a pattern of double growth, where each increase is doubled compared to the previous increment. If not specified, the plugin won\'t try to resend messages again after the first try."},"retryInsertMaxDelay":{"type":"integer","default":0,"minimum":1,"description":"Maximum delay in milliseconds before the plugin tries to insert a message again, once the server returned an error or was not available. If not specified, the plugin won\'t try to resend messages again after the first try."}},"required":["maxQueuedMessages"]},"topicMappings":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Textual identifier of this topic mapping."},"target":{"type":"string","description":"Name of the collection, the MQTT data should inserted to."},"schemaMapping":{"type":"string","description":"Name of a schema mapping, which should be applied to this topic mapping. If not specified the default schema mapping including all fields will be used."},"mqttTopics":{"type":"array","description":"List of topic filters the plugin forwards messages from, separated by a comma.","items":{"type":"string"}}},"required":["name","target","mqttTopics"]}}},"required":["name","connection","options","topicMappings"]}},"schemaMappings":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Textual identifier of this schema mapping."},"mapping":{"description":"Array of mapped MQTT message properties.","type":"array","items":{"type":"object","description":"Mapping object where \\"target\\" is the column name and \\"source\\" is the MQTT message information field.","properties":{"source":{"description":"MQTT message property","type":"string","enum":["hostname","payload","jsonPayload","topic","qos","client_id","retain","timestamp"]},"target":{"description":"Target name (e.g. DB column, destination JSON document property, etc)","type":"string"}},"required":["source","target"]}}}}}},"required":["connections","schemaMappings"]}');var c=Object.defineProperty,d=Object.defineProperties,l=Object.getOwnPropertyDescriptors,m=Object.getOwnPropertySymbols,g=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,h=(e,n,t)=>n in e?c(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,f=(e,n)=>{for(var t in n||(n={}))g.call(n,t)&&h(e,t,n[t]);if(m)for(var t of m(n))u.call(n,t)&&h(e,t,n[t]);return e};const b={id:"mongodb-bridge",title:"MongoDB Bridge",sidebar_label:"MongoDB Bridge"},y=void 0,M={unversionedId:"bridges/mongodb-bridge",id:"bridges/mongodb-bridge",title:"MongoDB Bridge",description:"The MongoDB-Bridge plugin can be used to insert data published to the Mosquitto broker into a MongoDB database. The plugin can handle multiple MongoDB client connections. Each connection applies changes to a configured database. Currently, the integrated client supports only basic authentication (username, password). Topic mappings are used to specify which MQTT topic payloads should be inserted into which collection. Each insert can contain the fields payload, jsonPayload, topic, qos, clientid, hostname, retain, timestamp of the received MQTT message. By default, all these fields are included in the database insert command. If needed, Schema mappings_ are used to filter or rename these fields. The maxQueuedMessages option can be configured per MongoDB client, to specify a limit of not-yet-processed MQTT messages, before the plugin starts to drop them. More information in the Json Schema section.",source:"@site/mosquitto/bridges/Mongodb-bridge.md",sourceDirName:"bridges",slug:"/bridges/mongodb-bridge",permalink:"/documentation-staging/mosquitto/next/bridges/mongodb-bridge",draft:!1,tags:[],version:"current",frontMatter:{id:"mongodb-bridge",title:"MongoDB Bridge",sidebar_label:"MongoDB Bridge"},sidebar:"someSidebar",previous:{title:"MQTT Bridge",permalink:"/documentation-staging/mosquitto/next/bridges/mqtt-bridge"},next:{title:"Kafka Bridge",permalink:"/documentation-staging/mosquitto/next/bridges/kafka-bridge"}},k={},v=[{value:"Plugin Activation",id:"plugin-activation",level:2},{value:"Config File Format",id:"config-file-format",level:2},{value:"Examples",id:"examples",level:2},{value:"MongoDB Atlas Bridge",id:"mongodb-atlas-bridge",level:2},{value:"JSON Schema",id:"json-schema",level:2}],T={toc:v};function w(e){var n,t=e,{components:a}=t,c=((e,n)=>{var t={};for(var i in e)g.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&m)for(var i of m(e))n.indexOf(i)<0&&u.call(e,i)&&(t[i]=e[i]);return t})(t,["components"]);return(0,i.kt)("wrapper",(n=f(f({},T),c),d(n,l({components:a,mdxType:"MDXLayout"}))),(0,i.kt)(o.Z,{mdxType:"PremiumFeature"}),(0,i.kt)("p",null,"The MongoDB-Bridge plugin can be used to insert data published to the Mosquitto broker into a MongoDB database. The plugin can handle multiple MongoDB client connections. Each connection applies changes to a configured database. Currently, the integrated client supports only ",(0,i.kt)("em",{parentName:"p"},"basic authentication")," (username, password). ",(0,i.kt)("em",{parentName:"p"},"Topic mappings")," are used to specify which MQTT topic payloads should be inserted into which collection. Each insert can contain the fields ",(0,i.kt)("inlineCode",{parentName:"p"},"payload"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"jsonPayload"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"topic"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"qos"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"client_id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hostname"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"retain"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamp")," of the received MQTT message. By default, all these fields are included in the database insert command. If needed, ",(0,i.kt)("em",{parentName:"p"},"Schema mappings")," are used to filter or rename these fields. The ",(0,i.kt)("inlineCode",{parentName:"p"},"maxQueuedMessages")," option can be configured per MongoDB client, to specify a limit of not-yet-processed MQTT messages, before the plugin starts to drop them. More information in the ",(0,i.kt)("a",f({parentName:"p"},{href:"#json-schema"}),"Json Schema section"),"."),(0,i.kt)("h2",f({},{id:"plugin-activation"}),"Plugin Activation"),(0,i.kt)("p",null,'To load and enable the plugin into the broker, the "mosquitto.conf" must be extended by:'),(0,i.kt)("pre",null,(0,i.kt)("code",f({parentName:"pre"},{}),"plugin /usr/lib/cedalo_mongodb_bridge.so\n\npersistence_location /mosquitto/data\n")),(0,i.kt)("p",null,"To make use of the hostname parameter make sure to set the environment variable in the ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose-yml")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"hostname")," as wished."),(0,i.kt)("h2",f({},{id:"config-file-format"}),"Config File Format"),(0,i.kt)(r,{schema:p,mdxType:"SchemaDescription"}),(0,i.kt)("h2",f({},{id:"examples"}),"Examples"),(0,i.kt)("p",null,"An example for the plugin configuration (",(0,i.kt)("inlineCode",{parentName:"p"},"mongodb-bridge.json"),") is:"),(0,i.kt)("pre",null,(0,i.kt)("code",f({parentName:"pre"},{className:"language-json"}),'{\n    "connections": [\n        {\n            "name": "connection-to-db1",\n            "connection": {\n                "hostname": "mongodb",\n                "port": 27017,\n                "database": "db1",\n                "credentials": {\n                    "username": "user1",\n                    "password": "secret123"\n                }\n            },\n            "options": {\n                "maxQueuedMessages": 100000,\n                "retryInsertMinDelay": 5,\n                "retryInsertMaxDelay": 25000\n            },\n            "topicMappings": [\n                {\n                    "name": "topic-mapping",\n                    "target": "sensorData",\n                    "schemaMapping": "reduced-mapping",\n                    "mqttTopics": ["sensor_data/#"]\n                }\n            ]\n        }\n    ],\n    "schemaMappings": [\n        {\n            "name": "reduced-mapping",\n            "mapping": [\n                { "source": "payload", "target": "data" },\n                { "source": "hostname", "target": "nodeId" }\n            ]\n        }\n    ]\n}\n')),(0,i.kt)("p",null,"With this example the plugin will create a single client to connect to a MongoDB\ninstance with the URI: ",(0,i.kt)("inlineCode",{parentName:"p"},"mongodb://user1:secret123@mongodb:27017"),"."),(0,i.kt)("p",null,"All data received on ",(0,i.kt)("inlineCode",{parentName:"p"},"sensor_data/#")," topics will be published to the collection ",(0,i.kt)("inlineCode",{parentName:"p"},"sensorData")," of the database ",(0,i.kt)("inlineCode",{parentName:"p"},"db1"),". This is configured using topic mappings, which define the MQTT topics inserted to MongoDB. Without a topic mapping, no messages will be written to MongoDB. Each topic mapping defines a list of MQTT topic filters, and the MongoDB collection where matching messages will be written."),(0,i.kt)("p",null,"A topic mapping can also reference a custom schema, or use the default schema. In the example above the data is reduced to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"payload")," of the MQTT message stored in a ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," column of the collection"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hostname")," stored into the ",(0,i.kt)("inlineCode",{parentName:"li"},"nodeId")," column of the collection")),(0,i.kt)("p",null,"Instead of using the default schema mapping containing all information of the default schema."),(0,i.kt)("admonition",f({},{type:"info"}),(0,i.kt)("p",{parentName:"admonition"},"This is an example configuration snippet, which applies to the docker container setup. For installation not running in a container the above configuration needs to be adjusted accordingly."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"persistence_location")," is used as the search path for the plugins' config file.")),(0,i.kt)("h2",f({},{id:"mongodb-atlas-bridge"}),"MongoDB Atlas Bridge"),(0,i.kt)("p",null,"In case the plugin should connect to a MongoDB Atlas cluster or custom options should be used the original connection string can be provided as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",f({parentName:"pre"},{className:"language-json"}),'{\n    "connections": [\n        {\n            "name": "connection-to-db-cluster",\n            "connection": {\n                "connectionURI": "mongodb+srv://user1:secret123@mongodb/db_name"\n            },\n            "options": {\n                "maxQueuedMessages": 100000\n            },\n            "topicMappings": [\n                {\n                    "name": "topic-mapping",\n                    "target": "sensorData",\n                    "schemaMapping": "reduced-mapping",\n                    "mqttTopics": ["sensor_data/#"]\n                }\n            ]\n        }\n    ],\n    "schemaMappings": [\n        {\n            "name": "reduced-mapping",\n            "mapping": [\n                { "source": "payload", "target": "data" },\n                { "source": "hostname", "target": "nodeId" }\n            ]\n        }\n    ]\n}\n')),(0,i.kt)("p",null,"In this example the plugin takes the connection string as a whole. The plugin will automatically resolve the host from the connection string provided as the ",(0,i.kt)("inlineCode",{parentName:"p"},"connectionURI")," parameter and parse the parameters ",(0,i.kt)("inlineCode",{parentName:"p"},"hostname"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"port"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"database"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"credentials"),". Those can therefore be omitted in the config. The ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," in the connection string always has to be URL encoded (percent-encoded). Additionally, standard MongoDB connection strings can also be provided as in the previous snippet."),(0,i.kt)("h2",f({},{id:"json-schema"}),"JSON Schema"),(0,i.kt)(s.default,{mdxType:"SchemaDisplay"}))}w.isMDXComponent=!0},29473:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>g,default:()=>y,frontMatter:()=>m,metadata:()=>u,toc:()=>f});var i=t(3905),o=Object.defineProperty,a=Object.defineProperties,r=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,n,t)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,l=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&d(e,t,n[t]);if(s)for(var t of s(n))c.call(n,t)&&d(e,t,n[t]);return e};const m={},g=void 0,u={unversionedId:"bridges/mongodb-bridge-schema",id:"bridges/mongodb-bridge-schema",title:"mongodb-bridge-schema",description:"Schema for the MongoDB\xae Bridge, which describes all configuration options for the bridge.",source:"@site/mosquitto/bridges/mongodb-bridge-schema.md",sourceDirName:"bridges",slug:"/bridges/mongodb-bridge-schema",permalink:"/documentation-staging/mosquitto/next/bridges/mongodb-bridge-schema",draft:!1,tags:[],version:"current",frontMatter:{}},h={},f=[],b={toc:f};function y(e){var n,t=e,{components:o}=t,d=((e,n)=>{var t={};for(var i in e)p.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&s)for(var i of s(e))n.indexOf(i)<0&&c.call(e,i)&&(t[i]=e[i]);return t})(t,["components"]);return(0,i.kt)("wrapper",(n=l(l({},b),d),a(n,r({components:o,mdxType:"MDXLayout"}))),(0,i.kt)("p",null,"Schema for the MongoDB\xae Bridge, which describes all configuration options for the bridge. "),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-json"}),'{\n    "type": "object",\n    "description": "Config object representing the MongoDB-Bridge configuration.",\n    "properties": {\n        "version": {\n            "description": "Version of the configuration schema",\n            "type": "string"\n        },\n        "connections": {\n            "type": "array",\n            "description": "Array of sub-configurations per MongoDB connection/database.",\n            "items": {\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "description": "Textual identifier of this configuration."\n                    },\n                    "connection": {\n                        "type": "object",\n                        "description": "MongoDB server specific configurations.1",\n                        "properties": {\n                            "connectionURI": {\n                                "type": "string",\n                                "description": "MongoDB connection string that contains protocol, hostname, port, database name, optional credentials and options."\n                            },\n                            "hostname": {\n                                "type": "string",\n                                "description": "Hostname or IP address of the MongoDB server."\n                            },\n                            "port": {\n                                "type": "integer",\n                                "description": "Port the MongoDB server is listening on."\n                            },\n                            "database": {\n                                "type": "string",\n                                "description": "Name of the database, the data should be inserted to."\n                            },\n                            "credentials": {\n                                "type": "object",\n                                "description": "Basic authentication configuration.",\n                                "properties": {\n                                    "username": {\n                                        "type": "string"\n                                    },\n                                    "password": {\n                                        "type": "string"\n                                    }\n                                }\n                            }\n                        },\n                        "oneOf": [\n                            {\n                                "required": [\n                                    "hostname",\n                                    "port",\n                                    "database"\n                                ]\n                            },\n                            {\n                                "required": [\n                                    "connectionURI"\n                                ]\n                            }\n                        ]\n                    },\n                    "options": {\n                        "type": "object",\n                        "description": "Options to configure queueing and publish retry mechanism.",\n                        "properties": {\n                            "maxQueuedMessages": {\n                                "type": "integer",\n                                "minimum": 1,\n                                "description": "Specifies the limit of not-yet-processed/inserted MQTT messages, before the plugin starts to drop them."\n                            },\n                            "retryInsertMinDelay": {\n                                "type": "integer",\n                                "default": 0,\n                                "minimum": 1,\n                                "description": "Initial delay in milliseconds before the plugin tries to insert a message again, once the server returned an error or was not available. The increment follows a pattern of double growth, where each increase is doubled compared to the previous increment. If not specified, the plugin won\'t try to resend messages again after the first try."\n                            },\n                            "retryInsertMaxDelay": {\n                                "type": "integer",\n                                "default": 0,\n                                "minimum": 1,\n                                "description": "Maximum delay in milliseconds before the plugin tries to insert a message again, once the server returned an error or was not available. If not specified, the plugin won\'t try to resend messages again after the first try."\n                            }\n                        },\n                        "required": [\n                            "maxQueuedMessages"\n                        ]\n                    },\n                    "topicMappings": {\n                        "type": "array",\n                        "items": {\n                            "type": "object",\n                            "properties": {\n                                "name": {\n                                    "type": "string",\n                                    "description": "Textual identifier of this topic mapping."\n                                },\n                                "target": {\n                                    "type": "string",\n                                    "description": "Name of the collection, the MQTT data should inserted to."\n                                },\n                                "schemaMapping": {\n                                    "type": "string",\n                                    "description": "Name of a schema mapping, which should be applied to this topic mapping. If not specified the default schema mapping including all fields will be used."\n                                },\n                                "mqttTopics": {\n                                    "type": "array",\n                                    "description": "List of topic filters the plugin forwards messages from, separated by a comma.",\n                                    "items": {\n                                        "type": "string"\n                                    }\n                                }\n                            },\n                            "required": [\n                                "name",\n                                "target",\n                                "mqttTopics"\n                            ]\n                        }\n                    }\n                },\n                "required": [\n                    "name",\n                    "connection",\n                    "options",\n                    "topicMappings"\n                ]\n            }\n        },\n        "schemaMappings": {\n            "type": "array",\n            "items": {\n                "type": "object",\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "description": "Textual identifier of this schema mapping."\n                    },\n                    "mapping": {\n                        "description": "Array of mapped MQTT message properties.",\n                        "type": "array",\n                        "items": {\n                            "type": "object",\n                            "description": "Mapping object where \\"target\\" is the column name and \\"source\\" is the MQTT message information field.",\n                            "properties": {\n                                "source": {\n                                    "description": "MQTT message property",\n                                    "type": "string",\n                                    "enum": [\n                                        "hostname",\n                                        "payload",\n                                        "jsonPayload",\n                                        "topic",\n                                        "qos",\n                                        "client_id",\n                                        "retain",\n                                        "timestamp"\n                                    ]\n                                },\n                                "target": {\n                                    "description": "Target name (e.g. DB column, destination JSON document property, etc)",\n                                    "type": "string"\n                                }\n                            },\n                            "required": [\n                                "source",\n                                "target"\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    },\n    "required": [\n        "connections",\n        "schemaMappings"\n    ]\n}```\n')))}y.isMDXComponent=!0},49044:(e,n,t)=>{t.d(n,{Z:()=>s});var i=t(67294),o=t(39082),a=t(62659),r=t(83166);function s({inline:e}){return i.createElement(o.Z,{sx:{margin:e?"0px 5px":"5px 5px 15px 5px",height:e?"22px":void 0,color:"#ffffff",backgroundColor:a.Z[500]},size:"small",icon:i.createElement(r.Z,{style:{color:"white"},size:"small"}),label:"Premium"})}}}]);