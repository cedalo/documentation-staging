"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[19994],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(r),h=i,f=m["".concat(s,".").concat(h)]||m[h]||p[h]||a;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},90428:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>h,default:()=>y,frontMatter:()=>m,metadata:()=>f,toc:()=>v});var n=r(3905),i=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,r)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,p=(e,t)=>{for(var r in t||(t={}))s.call(t,r)&&u(e,r,t[r]);if(l)for(var r of l(t))c.call(t,r)&&u(e,r,t[r]);return e};const m={id:"server-certificates",title:"Server Certificates",sidebar_label:"Server Certificates"},h="Docker Setup",f={unversionedId:"security/certificates/server-certificates",id:"security/certificates/server-certificates",title:"Server Certificates",description:"Prerequisites",source:"@site/mosquitto/security/certificates/server-certificates.md",sourceDirName:"security/certificates",slug:"/security/certificates/server-certificates",permalink:"/documentation-staging/mosquitto/next/security/certificates/server-certificates",draft:!1,tags:[],version:"current",frontMatter:{id:"server-certificates",title:"Server Certificates",sidebar_label:"Server Certificates"},sidebar:"someSidebar",previous:{title:"SAML Authentication/SSO",permalink:"/documentation-staging/mosquitto/next/security/platform-access/platform-saml-auth"},next:{title:"mTLS",permalink:"/documentation-staging/mosquitto/next/security/certificates/mtls"}},d={},v=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configuring Pro Mosquitto Broker with a Server Certificate",id:"configuring-pro-mosquitto-broker-with-a-server-certificate",level:2},{value:"Pro Mosquitto TLS termination",id:"pro-mosquitto-tls-termination",level:3},{value:"HA Proxy TLS termination",id:"ha-proxy-tls-termination",level:3},{value:"Client connections",id:"client-connections",level:3},{value:"Certificate access",id:"certificate-access",level:3},{value:"Configuring Cedalo Platform with a Server Certificate",id:"configuring-cedalo-platform-with-a-server-certificate",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Example configuration",id:"example-configuration",level:3},{value:"Docker",id:"docker",level:4},{value:"Docker compose",id:"docker-compose",level:5},{value:"RPM",id:"rpm",level:4},{value:"Configuring Pro Mosquitto Broker with a Server Certificate on Kubernetes/Openshift",id:"configuring-pro-mosquitto-broker-with-a-server-certificate-on-kubernetesopenshift",level:2},{value:"Prerequisites (For Single Node)",id:"prerequisites-for-single-node",level:2},{value:"Pro Mosquitto TLS termination",id:"pro-mosquitto-tls-termination-1",level:3},{value:"Uncomment the configurations in relevant files:",id:"uncomment-the-configurations-in-relevant-files",level:4},{value:"mosquitto.conf",id:"mosquittoconf",level:4},{value:"statefulset.yaml",id:"statefulsetyaml",level:4},{value:"server-certs.yaml",id:"server-certsyaml",level:4},{value:"service-mosquitto.yaml",id:"service-mosquittoyaml",level:4},{value:"Prerequisites (For HA using HAProxy)",id:"prerequisites-for-ha-using-haproxy",level:2},{value:"values.yaml",id:"valuesyaml",level:4},{value:"deployment-haproxy-openshift.yaml/deployment-haproxy.yaml",id:"deployment-haproxy-openshiftyamldeployment-haproxyyaml",level:4},{value:"service-haproxy-loadbalancer.yaml",id:"service-haproxy-loadbalanceryaml",level:4},{value:"haproxy-config.yaml",id:"haproxy-configyaml",level:4}],k={toc:v};function y(e){var t,r=e,{components:i}=r,u=((e,t)=>{var r={};for(var n in e)s.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&l)for(var n of l(e))t.indexOf(n)<0&&c.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=p(p({},k),u),a(t,o({components:i,mdxType:"MDXLayout"}))),(0,n.kt)("h1",p({},{id:"docker-setup"}),"Docker Setup"),(0,n.kt)("h2",p({},{id:"prerequisites"}),"Prerequisites"),(0,n.kt)("p",null,"Ensure you have the following files ready before configuring Mosquitto:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Server Certificate")," (",(0,n.kt)("inlineCode",{parentName:"li"},"server.crt"),"): The public server certificate."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Private Key")," (",(0,n.kt)("inlineCode",{parentName:"li"},"server.key"),"): The private key associated with the server certificate.")),(0,n.kt)("h2",p({},{id:"configuring-pro-mosquitto-broker-with-a-server-certificate"}),"Configuring Pro Mosquitto Broker with a Server Certificate"),(0,n.kt)("p",null,"This document outlines the two available methods for configuring a broker with a server certificate: using a proxy for TLS termination or configuring TLS directly on the broker. In cluster environments, the use of HAProxy, as provided in the default setup, is recommended for managing TLS termination."),(0,n.kt)("h3",p({},{id:"pro-mosquitto-tls-termination"}),"Pro Mosquitto TLS termination"),(0,n.kt)("p",null,"Open your ",(0,n.kt)("inlineCode",{parentName:"p"},"mosquitto.conf")," file to add a certificate to a certain port.\nAdd or modify the following settings to configure the Pro Mosquitto broker to use the server certificate:"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"# Enable a listener on port 8883 for SSL/TLS connections\nlistener 8883\nprotocol mqtt\n\n# SSL/TLS certificate paths\ncertfile /path/to/server.crt\nkeyfile /path/to/server.key\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"listener 8883: Sets the port for SSL/TLS communication. Port 8883 is the standard MQTT SSL/TLS port."),(0,n.kt)("li",{parentName:"ul"},"certfile: Specifies the path to the server's public certificate file."),(0,n.kt)("li",{parentName:"ul"},"keyfile: Specifies the path to the server's private key file.")),(0,n.kt)("h3",p({},{id:"ha-proxy-tls-termination"}),"HA Proxy TLS termination"),(0,n.kt)("p",null,"In a cluster setup an HA Proxy is used for TLS termination. This is the default config of the frontend ",(0,n.kt)("inlineCode",{parentName:"p"},"haproxy.cfg"),"file:"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"frontend mqtt_frontend\n    bind *:1883\n    mode tcp\n    default_backend mqtt_backend\n    timeout client 10m\n")),(0,n.kt)("p",null,"In order to enable TLS termination here add the following behind the ",(0,n.kt)("inlineCode",{parentName:"p"},"bind *:<port>")," parameter: ",(0,n.kt)("inlineCode",{parentName:"p"},"ssl crt /path/to/certs/server.pem"),"\nThis will do the TLS termination at the frontend stage before routing the traffic further to the set backend (here ",(0,n.kt)("inlineCode",{parentName:"p"},"mqtt_backend")," )."),(0,n.kt)("h3",p({},{id:"client-connections"}),"Client connections"),(0,n.kt)("p",null,"Use an MQTT client to connect to the broker using the secure port (e.g., 8883) to verify that the server certificate is being used:"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"mosquitto_sub -h <broker-ip> -p 8883 -t test/topic --cafile /path/to/ca.crt\n")),(0,n.kt)("p",null,"In this example, a ",(0,n.kt)("inlineCode",{parentName:"p"},"--cafile")," parameter is added to the test because, depending on the device and the server certificate, your underlying system may not have the required CA in place to validate the server certificate you set."),(0,n.kt)("h3",p({},{id:"certificate-access"}),"Certificate access"),(0,n.kt)("p",null,"It is important that the files from the specified path are available to Pro Mosquitto. Ensure that the private key file is securely accessible to the Mosquitto service:"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"sudo chmod 640 /path/to/server.key\nsudo chown mosquitto:mosquitto /path/to/server.key\n")),(0,n.kt)("p",null,"This ensures that only the Mosquitto service has access to the private key, enhancing security."),(0,n.kt)("p",null,"To apply the changes, restart Pro Mosquitto. Check the Mosquitto logs for troubleshooting if needed."),(0,n.kt)("h2",p({},{id:"configuring-cedalo-platform-with-a-server-certificate"}),"Configuring Cedalo Platform with a Server Certificate"),(0,n.kt)("p",null,"You can achieve https:// access either via a reverse proxy of your choice or by adding the server certificates directly to the platform via environment variables."),(0,n.kt)("h3",p({},{id:"environment-variables"}),"Environment Variables"),(0,n.kt)("p",null,"To conifgure the server certificates use the following Environment Variables:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"BASE_URL"),": URL the platform will be reachable at (should have the same IP/hostname as specified in the certificate)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"NEXTAUTH_URL"),": URL the platform will be reachable at (should have the same IP/hostname as specified in the certificate)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"MOSQUITTO_PLATFORM_HTTPS_KEY_PATH"),": Path to server's private key file (required)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"MOSQUITTO_PLATFORM_HTTPS_CERT_PATH"),": Path to server's certificate (required)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"MOSQUITTO_PLATFORM_HTTPS_CA_PATH"),": path to CA certificate (optional)")),(0,n.kt)("h3",p({},{id:"example-configuration"}),"Example configuration"),(0,n.kt)("h4",p({},{id:"docker"}),"Docker"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{}),"            BASE_URL: https://192.168.178.27:3000\n            NEXTAUTH_URL: https://192.168.178.27:3000\n            MOSQUITTO_PLATFORM_HTTPS_KEY_PATH: /certs/cert.key\n            MOSQUITTO_PLATFORM_HTTPS_CERT_PATH: /certs/cert.crt\n")),(0,n.kt)("h5",p({},{id:"docker-compose"}),"Docker compose"),(0,n.kt)("p",null,"In docker based deployments make sure, that the linked certificates are reachable. A mount to the local directory allows you to store the used certs in the setup folders:"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{}),"        volumes:\n            ...\n            - ./certs:/certs\n")),(0,n.kt)("h4",p({},{id:"rpm"}),"RPM"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{}),"            export BASE_URL=https://192.168.178.27:3000\n            export NEXTAUTH_URL=https://192.168.178.27:3000\n            export MOSQUITTO_PLATFORM_HTTPS_KEY_PATH=/certs/cert.key\n            export MOSQUITTO_PLATFORM_HTTPS_CERT_PATH=/certs/cert.crt\n")),(0,n.kt)("h1",p({},{id:"kubernetesopenshift-setup"}),"Kubernetes/Openshift Setup"),(0,n.kt)("h2",p({},{id:"configuring-pro-mosquitto-broker-with-a-server-certificate-on-kubernetesopenshift"}),"Configuring Pro Mosquitto Broker with a Server Certificate on Kubernetes/Openshift"),(0,n.kt)("p",null,"This document outlines the two available methods for configuring a broker runnning on a Kubernetes or Openshift setup with a server certificate: using a proxy for TLS termination or configuring TLS directly on the broker. In cluster environments, the use of HAProxy, as provided in the default setup, is recommended for managing TLS termination."),(0,n.kt)("h2",p({},{id:"prerequisites-for-single-node"}),"Prerequisites (For Single Node)"),(0,n.kt)("p",null,"Ensure you have the following files ready before configuring Mosquitto:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Server Certificate")," (",(0,n.kt)("inlineCode",{parentName:"li"},"server.crt"),"): The public server certificate."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Private Key")," (",(0,n.kt)("inlineCode",{parentName:"li"},"server.key"),"): The private key associated with the server certificate.")),(0,n.kt)("h3",p({},{id:"pro-mosquitto-tls-termination-1"}),"Pro Mosquitto TLS termination"),(0,n.kt)("p",null,"Open your ",(0,n.kt)("inlineCode",{parentName:"p"},"mosquitto.conf")," file that is part of your helm chart under ",(0,n.kt)("inlineCode",{parentName:"p"},"files")," section to add a certificate to a certain port.\nAdd or modify the following settings to configure the Pro Mosquitto broker to use the server certificate:"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"# Enable a listener on port 8883 for SSL/TLS connections\nlistener 8883\nprotocol mqtt\n\n# SSL/TLS certificate paths\ncertfile /path/to/server.crt\nkeyfile /path/to/server.key\n")),(0,n.kt)("p",null,"The helm chart contains some default setting you can use the same unless you want your own custom changes.  The ",(0,n.kt)("inlineCode",{parentName:"p"},"mosquitto.conf")," that comes along with helm chart has the following preconfigured commented out setup. In order to enable TLS, please follow the following steps:"),(0,n.kt)("h4",p({},{id:"uncomment-the-configurations-in-relevant-files"}),"Uncomment the configurations in relevant files:"),(0,n.kt)("h4",p({},{id:"mosquittoconf"}),"mosquitto.conf"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"# Enable a listener on port 8883 for SSL/TLS connections\nlistener 8883\nprotocol mqtt\n\ncertfile /mosquitto/certs/server.crt\nkeyfile /mosquitto/certs/server.key\n")),(0,n.kt)("p",null,"If you notice, ",(0,n.kt)("inlineCode",{parentName:"p"},"server.key")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"server.crt")," defaults to path  ",(0,n.kt)("inlineCode",{parentName:"p"},"/mosquitto/certs/"),". This is the same path that is part of other manifests file like ",(0,n.kt)("inlineCode",{parentName:"p"},"statefulset.yaml")," of the Helm Charts. If you wish to change it make sure you change it in ",(0,n.kt)("inlineCode",{parentName:"p"},"statefulset.yaml")," as well."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"listener 8883: Sets the port for SSL/TLS communication. Port 8883 is the standard MQTT SSL/TLS port."),(0,n.kt)("li",{parentName:"ul"},"certfile: Specifies the path to the server's public certificate file."),(0,n.kt)("li",{parentName:"ul"},"keyfile: Specifies the path to the server's private key file.")),(0,n.kt)("h4",p({},{id:"statefulsetyaml"}),"statefulset.yaml"),(0,n.kt)("p",null,"The two relevant sections to be uncommented are related to the ",(0,n.kt)("inlineCode",{parentName:"p"},"mosquitto-tls-volume"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"volumeMounts:\n    - name: mosquitto-tls-volume\n    mountPath: /mosquitto/certs\n    readOnly: true\n")),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"volumes:\n    - name: mosquitto-tls-volume\n        secret:\n            secretName: mosquitto-server-tls # Refers to the server TLS Secret\n            items:\n                - key: server.crt\n                path: server.crt\n                mode: 0644 # Read-only for everyone\n                - key: server.key\n                path: server.key\n                mode: 0640 # Owner read/write, no access for others (most secure for private key)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Note: If you have changed the ",(0,n.kt)("inlineCode",{parentName:"li"},"/mosquitto/certs")," path in the previous step, make sure you change it here as well.")),(0,n.kt)("h4",p({},{id:"server-certsyaml"}),"server-certs.yaml"),(0,n.kt)("p",null,"Paste the base64 converted version of ",(0,n.kt)("inlineCode",{parentName:"p"},"server.key")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"server.crt")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"server-certs.yaml"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),'data:\n  server.crt: ""\n    # Paste your base64 version of server.crt here\n  server.key: ""\n    # Paste your base64 version of server.key here\n')),(0,n.kt)("h4",p({},{id:"service-mosquittoyaml"}),"service-mosquitto.yaml"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"- name: mqtt-secure\n    port: {{ .Values.mosquitto.ports.secureListener }}\n    targetPort: {{ .Values.mosquitto.ports.secureListenerTarget }}\n    protocol: TCP\n")),(0,n.kt)("p",null,"Deploy the helm chart after making changes and now you connect with TLS enabled conection."),(0,n.kt)("h2",p({},{id:"prerequisites-for-ha-using-haproxy"}),"Prerequisites (For HA using HAProxy)"),(0,n.kt)("p",null,"For HA cluster, tls termination happens at the haproxy. Therefore, the server certificates needs to be present at HAproxy instance."),(0,n.kt)("p",null,"Ensure you have the following files ready before configuring Mosquitto:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Server Certificate")," (",(0,n.kt)("inlineCode",{parentName:"li"},"haproxy_combined.pem"),"): Server Certificate")),(0,n.kt)("p",null,"In order to enable that make sure you enable TLS you uncomment or add relevant details based on the following steps:"),(0,n.kt)("h4",p({},{id:"valuesyaml"}),"values.yaml"),(0,n.kt)("p",null,"Place the contents of your ",(0,n.kt)("inlineCode",{parentName:"p"},"haproxy_combined.pem")," under ",(0,n.kt)("inlineCode",{parentName:"p"},"pemContent")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"values.yaml"),"."),(0,n.kt)("h4",p({},{id:"deployment-haproxy-openshiftyamldeployment-haproxyyaml"}),"deployment-haproxy-openshift.yaml/deployment-haproxy.yaml"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"volumeMounts:\n\n- name: tls-certs\n    mountPath: {{ .Values.haproxy.haproxyCombinedPemFilePath }} # Directory where certs will be available\n    readOnly: true # Certificates should be read-only\n")),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"volumes:\n    - name: tls-certs\n        secret:\n            secretName: haproxy-tls-certs\n            items:\n               - key: haproxy_combined.pem # Key in the Secret\n                 path: haproxy_combined.pem # Filename in the container\n")),(0,n.kt)("h4",p({},{id:"service-haproxy-loadbalanceryaml"}),"service-haproxy-loadbalancer.yaml"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"\n- name: haproxy-secure\n      port: {{ .Values.haproxy.ports.secureListener }}\n      targetPort: {{ .Values.haproxy.ports.secureListenerTarget }}\n      protocol: TCP\n")),(0,n.kt)("h4",p({},{id:"haproxy-configyaml"}),"haproxy-config.yaml"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"\nFor Secure connection\n    frontend mqtt_frontend_secure\n        bind *:{{ .Values.haproxy.ports.secureListener }} ssl crt {{ .Values.haproxy.haproxyCombinedPemFilePath }}/haproxy_combined.pem\n        mode tcp\n        maxconn 10000\n        default_backend mqtt_backend\n        timeout client 10m\n")),(0,n.kt)("p",null,"Deploy the helm chart after making changes and now you connect with TLS enabled conection."))}y.isMDXComponent=!0}}]);