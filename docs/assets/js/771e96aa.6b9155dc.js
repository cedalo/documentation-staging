"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[62246],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),c=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,p=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),m=c(n),d=a,b=m["".concat(p,".").concat(d)]||m[d]||s[d]||l;return n?r.createElement(b,o(o({ref:e},u),{},{components:n})):r.createElement(b,o({ref:e},u))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},13335:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>f,contentTitle:()=>d,default:()=>N,frontMatter:()=>m,metadata:()=>b,toc:()=>g});var r=n(3905),a=Object.defineProperty,l=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(t,e,n)=>e in t?a(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,s=(t,e)=>{for(var n in e||(e={}))p.call(e,n)&&u(t,n,e[n]);if(i)for(var n of i(e))c.call(e,n)&&u(t,n,e[n]);return t};const m={id:"octtobin",title:"OCT.TO.BIN",hide_title:!0},d=void 0,b={unversionedId:"functions/Engineering/octtobin",id:"version-3.0/functions/Engineering/octtobin",title:"OCT.TO.BIN",description:"OCT.TO.BIN",source:"@site/streamsheets_versioned_docs/version-3.0/functions/Engineering/octtobin.md",sourceDirName:"functions/Engineering",slug:"/functions/Engineering/octtobin",permalink:"/documentation-staging/streamsheets/functions/Engineering/octtobin",draft:!1,tags:[],version:"3.0",frontMatter:{id:"octtobin",title:"OCT.TO.BIN",hide_title:!0},sidebar:"someSidebar",previous:{title:"HEX.TO.OCT",permalink:"/documentation-staging/streamsheets/functions/Engineering/hextooct"},next:{title:"OCT.TO.DEC",permalink:"/documentation-staging/streamsheets/functions/Engineering/octtodec"}},f={},g=[],k={toc:g};function N(t){var e,n=t,{components:a}=n,u=((t,e)=>{var n={};for(var r in t)p.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&i)for(var r of i(t))e.indexOf(r)<0&&c.call(t,r)&&(n[r]=t[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(e=s(s({},k),u),l(e,o({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("h1",null,"OCT.TO.BIN"),(0,r.kt)("p",null,"Converts an octal number to binary."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("p",null,"=OCT.TO.BIN(Number, ","[","Places","]",")"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"Number"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"Number"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"The octal number to convert.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"Places (optional)"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"Number"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"The number of characters to use for returned value. If value has less characters then it is padded with leading zeros.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"Number or Error"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"The binary number or a #NUM! ",(0,r.kt)("a",s({parentName:"td"},{href:"../../other/errorcodes"}),"error")," if given number is not a valid octal number. The #VALUE! ",(0,r.kt)("a",s({parentName:"td"},{href:"../../other/errorcodes"}),"error")," is returned if specified places is not numeric or negative.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Formula"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Result"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=OCT.TO.BIN(3)"))),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"11"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"converts octal 3 to binary")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=OCT.TO.BIN(3, 4)"))),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"0011"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"converts octal 3 to binary with 4 characters")))))}N.isMDXComponent=!0}}]);