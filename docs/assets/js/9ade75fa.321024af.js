"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[89742],{2548:(e,n,a)=>{var t=a(64836);n.Z=void 0;var i=t(a(64938)),o=a(85893),s=(0,i.default)((0,o.jsx)("path",{d:"M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"}),"InfoOutlined");n.Z=s},94330:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>f,contentTitle:()=>h,default:()=>y,frontMatter:()=>u,metadata:()=>g,toc:()=>k});var t=a(3905),i=a(87961),o=Object.defineProperty,s=Object.defineProperties,l=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,n,a)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,m=(e,n)=>{for(var a in n||(n={}))p.call(n,a)&&d(e,a,n[a]);if(r)for(var a of r(n))c.call(n,a)&&d(e,a,n[a]);return e};const u={id:"data-validation",sidebar_label:"Data Validation"},h='Data Validation <SinceVersion3 version="3.1"></SinceVersion3>',g={unversionedId:"advanced-features/data-validation",id:"advanced-features/data-validation",title:'Data Validation <SinceVersion3 version="3.1"></SinceVersion3>',description:"Introduction",source:"@site/mosquitto/advanced-features/data-validation.md",sourceDirName:"advanced-features",slug:"/advanced-features/data-validation",permalink:"/documentation-staging/mosquitto/next/advanced-features/data-validation",draft:!1,tags:[],version:"current",frontMatter:{id:"data-validation",sidebar_label:"Data Validation"},sidebar:"someSidebar",previous:{title:"Subscribe to Topics",permalink:"/documentation-staging/mosquitto/next/mqtt-client/command-line/cl-subscribe"},next:{title:"Persistent Queueing",permalink:"/documentation-staging/mosquitto/next/advanced-features/persistent-queueing"}},f={},k=[{value:"Introduction",id:"introduction",level:2},{value:"Plugin activation",id:"plugin-activation",level:2},{value:"Platform UI",id:"platform-ui",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Topic Mappings",id:"topic-mappings",level:3},{value:"Schemas",id:"schemas",level:3},{value:"Control topic",id:"control-topic",level:2},{value:"JSON Schema",id:"json-schema",level:2}],v={toc:k};function y(e){var n,o=e,{components:d}=o,u=((e,n)=>{var a={};for(var t in e)p.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&r)for(var t of r(e))n.indexOf(t)<0&&c.call(e,t)&&(a[t]=e[t]);return a})(o,["components"]);return(0,t.kt)("wrapper",(n=m(m({},v),u),s(n,l({components:d,mdxType:"MDXLayout"}))),(0,t.kt)("h1",m({},{id:"data-validation-"}),"Data Validation ",(0,t.kt)(i.Z,{version:"3.1",mdxType:"SinceVersion3"})),(0,t.kt)("h2",m({},{id:"introduction"}),"Introduction"),(0,t.kt)("p",null,"The data validation plugin allows to discard received messages based on their payload before they are published by the\nMosquitto broker.\nTo decide whether a message is rejected, its payload is validated against a JSON schema."),(0,t.kt)("p",null,"Features:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Topic based message payload validation (",(0,t.kt)("a",m({parentName:"li"},{href:"#topic-mappings"}),"Topic Mappings"),")"),(0,t.kt)("li",{parentName:"ul"},"Use JSON schema to define the format of a valid payload (",(0,t.kt)("a",m({parentName:"li"},{href:"#schemas"}),"Schemas"),")"),(0,t.kt)("li",{parentName:"ul"},"Support for topic wildcards"),(0,t.kt)("li",{parentName:"ul"},"Multiple topics can be validated by one or several schemas")),(0,t.kt)("h2",m({},{id:"plugin-activation"}),"Plugin activation"),(0,t.kt)("p",null,"Ensure that the broker has a suitable license for using the Data Validation plugin.\nIf that is the case the plugin can be activated by adding the following to the ",(0,t.kt)("inlineCode",{parentName:"p"},"mosquitto.conf")," file:"),(0,t.kt)("pre",null,(0,t.kt)("code",m({parentName:"pre"},{}),"plugin /usr/lib/cedalo_data_validation.so\n")),(0,t.kt)("admonition",m({},{type:"caution"}),(0,t.kt)("p",{parentName:"admonition"},"Please place this plugin as first plugin in the mosquitto.conf for now. The reason for this is, that plugins get loaded\nin-order of the mosquitto.conf and therefore the callbacks for events (in this case\nMOSQ_EVT_MESSAGE_IN) are getting registered/invoked in-order. If there are other plugins registering for the event prior\nto the Data Validation plugin, these plugins will be able to process possible invalid payload.\nFix for this is WIP.")),(0,t.kt)("h2",m({},{id:"platform-ui"}),"Platform UI"),(0,t.kt)("p",null,'The Cedalo Platform allows you to modify the configuration of the data validation. Navigate to the broker, where you\nwant to manage the data validation. Then select "Data Validation" from the navigation. If the entry is not available,\nyour\nlicense or setup does not allow to use data validation. Either update your license or modify your configuration to\nenable\ndata validation.'),(0,t.kt)("p",null,'After selecting the "Data Validation" navigation entry, the following screen will appear:'),(0,t.kt)("img",{className:"docimagemb",src:a(70148).Z,width:"100%"}),(0,t.kt)("p",null,"Here you can modify the configuration for the data validation. The configuration uses a json format, which is explained\nbelow. It has to match the json schema also provided below. Simply edit your configuration and save it once you are\ndone editing. The config is not saved automatically. "),(0,t.kt)("p",null,"If an error is detected within the configuration, a hint is displayed below the config."),(0,t.kt)("h2",m({},{id:"configuration"}),"Configuration"),(0,t.kt)("p",null,"The configuration consist of two parts:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"topicMappings"),": define which messages should be validated (",(0,t.kt)("a",m({parentName:"li"},{href:"#topic-mappings"}),"Topic Mappings"),")"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"schemas"),": a list of schemas to validate message payload (",(0,t.kt)("a",m({parentName:"li"},{href:"#schemas"}),"Schemas"),")")),(0,t.kt)("h3",m({},{id:"topic-mappings"}),"Topic Mappings"),(0,t.kt)("p",null,"Topic mappings define which broker messages should be validated by assigning a schema to one or more topics.\nIt is possible to validate a message with multiple schemas. In that case the message payload must fulfill all schemas."),(0,t.kt)("p",null,"Note:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"wildcards such as ",(0,t.kt)("inlineCode",{parentName:"li"},"+")," (single-level) or ",(0,t.kt)("inlineCode",{parentName:"li"},"#")," (multi-level) are supported too"),(0,t.kt)("li",{parentName:"ul"},"messages for which no matching topic mapping exists are not validated and therefore never discarded"),(0,t.kt)("li",{parentName:"ul"},"messages which have a mapped topic but no JSON payload are discarded by default")),(0,t.kt)("p",null,"Following is an example of topic mappings which validate topic ",(0,t.kt)("inlineCode",{parentName:"p"},"topicA")," against schema ",(0,t.kt)("inlineCode",{parentName:"p"},"s1")," and ",(0,t.kt)("inlineCode",{parentName:"p"},"topicB")," against\nschemas ",(0,t.kt)("inlineCode",{parentName:"p"},"s1")," and ",(0,t.kt)("inlineCode",{parentName:"p"},"s2"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n  "topicMappings": [\n    {\n      "name": "mapping1",\n      "schema": "s1",\n      "topics": [\n        "topicA",\n        "topicB"\n      ]\n    },\n    {\n      "name": "mapping2",\n      "schema": "s2",\n      "topics": [\n        "topicB"\n      ]\n    }\n  ]\n}\n')),(0,t.kt)("h3",m({},{id:"schemas"}),"Schemas"),(0,t.kt)("p",null,"A JSON schema defines the format that a message payload must fulfill. Each schema has a unique ",(0,t.kt)("inlineCode",{parentName:"p"},"name")," property which is\nused to reference it within the ",(0,t.kt)("inlineCode",{parentName:"p"},"topcicMappings"),". The complete JSON schema definition is simply specified\nunder ",(0,t.kt)("inlineCode",{parentName:"p"},"schema"),"."),(0,t.kt)("p",null,"Following example defines a schema ",(0,t.kt)("inlineCode",{parentName:"p"},"s1")," which requires a ",(0,t.kt)("inlineCode",{parentName:"p"},"name")," property and another schema ",(0,t.kt)("inlineCode",{parentName:"p"},"s2")," which requires an ",(0,t.kt)("inlineCode",{parentName:"p"},"age"),"\nfield"),(0,t.kt)("pre",null,(0,t.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n  "schemas": [\n    {\n      "name": "s1",\n      "schema": {\n        "type": "object",\n        "properties": {\n          "name": {\n            "type": "string"\n          }\n        },\n        "required": [\n          "name"\n        ]\n      }\n    },\n    {\n      "name": "s2",\n      "schema": {\n        "type": "object",\n        "properties": {\n          "age": {\n            "type": "number"\n          }\n        },\n        "required": [\n          "age"\n        ]\n      }\n    }\n  ]\n}\n')),(0,t.kt)("h2",m({},{id:"control-topic"}),"Control topic"),(0,t.kt)("p",null,"The plugin can be controlled by sending command messages to the ",(0,t.kt)("inlineCode",{parentName:"p"},"$CONTROL/cedalo/data-validation/v1")," topic.\nResponses are published to the ",(0,t.kt)("inlineCode",{parentName:"p"},"$CONTROL/cedalo/data-validation/v1/response")," topic."),(0,t.kt)("p",null,"Following commands are currently available:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"getStatus")," to fetch information about current plugin status"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"getSchema")," to get the schema used to validate the plugin config JSON"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"getConfig")," to fetch current plugin config as a JSON object"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"updateConfig")," to update the complete configuration of the Data Validation plugin")),(0,t.kt)("p",null,"Each control message has the following format:"),(0,t.kt)("pre",null,(0,t.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n  "commands": [\n    {\n      "command": <A\n      known\n      control\n      api\n      command>,\n      "correlationData": <Optional\n      UUID\n      to\n      identify\n      sender.\n      If\n      specified\n      it\n      is\n      passed\n      with\n      response.>,\n      "configChange": <Only\n      for\n      updateConfig\n      command: the\n      new\n      config\n      JSON>\n    }\n  ]\n}\n')),(0,t.kt)("p",null,"For example to fetch the current plgin config send a ",(0,t.kt)("inlineCode",{parentName:"p"},"getConfig")," command:"),(0,t.kt)("pre",null,(0,t.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n  "commands": [\n    {\n      "command": "getConfig",\n      "correlationData": "1234"\n    }\n  ]\n}\n')),(0,t.kt)("p",null,"And to update the complete plugin configuration use the ",(0,t.kt)("inlineCode",{parentName:"p"},"updateConfig")," command, e.g.:"),(0,t.kt)("pre",null,(0,t.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n  "commands": [\n    {\n      "command": "updateConfig",\n      "correlationData": "12345",\n      "configChange": {\n        "topicMappings": [\n          {\n            "name": "mapping1",\n            "schema": "s1",\n            "topics": [\n              "topicA",\n              "topicB"\n            ]\n          },\n          {\n            "name": "mapping2",\n            "schema": "s2",\n            "topics": [\n              "topicB"\n            ]\n          }\n        ],\n        "schemas": [\n          {\n            "name": "s1",\n            "schema": {\n              "type": "object",\n              "properties": {\n                "name": {\n                  "type": "string"\n                }\n              },\n              "required": [\n                "name"\n              ]\n            }\n          },\n          {\n            "name": "s2",\n            "schema": {\n              "type": "object",\n              "properties": {\n                "age": {\n                  "type": "number"\n                }\n              },\n              "required": [\n                "age"\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n')),(0,t.kt)("h2",m({},{id:"json-schema"}),"JSON Schema"),(0,t.kt)("p",null,"Following schema is used by the Data Validation plugin to validate any new configuration JSON:"),(0,t.kt)("pre",null,(0,t.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n  "title": "Data Validation Plugin Configuration",\n  "description": "",\n  "type": "object",\n  "properties": {\n    "topicMappings": {\n      "type": "array",\n      "items": {\n        "type": "object",\n        "properties": {\n          "name": {\n            "type": "string",\n            "description": "Unique identifier of this topic mapping."\n          },\n          "schema": {\n            "type": "string",\n            "description": "Name of JSON schema to use for validating the message payload."\n          },\n          "topics": {\n            "type": "array",\n            "description": "List of topics whose payload should be validated against specified schema.",\n            "items": {\n              "type": "string"\n            }\n          }\n        },\n        "required": [\n          "name",\n          "schema",\n          "topics"\n        ]\n      }\n    },\n    "schemas": {\n      "type": "array",\n      "items": {\n        "type": "object",\n        "properties": {\n          "name": {\n            "type": "string",\n            "description": "Unique identifier. Used to reference this schema within topic mapping."\n          },\n          "schema": {\n            "type": "object",\n            "description": "A JSON schema definition to validate the message payload."\n          }\n        },\n        "required": [\n          "name",\n          "schema"\n        ]\n      }\n    }\n  },\n  "required": [\n    "topicMappings",\n    "schemas"\n  ]\n};\n\n\n')))}y.isMDXComponent=!0},87961:(e,n,a)=>{a.d(n,{Z:()=>s});var t=a(67294),i=a(39082),o=a(2548);function s({version:e}){return e?t.createElement(i.Z,{sx:{margin:"0px 5px 5px 10px",bgcolor:"#FD602E"},color:"info",size:"small",icon:t.createElement(o.Z,{size:"small"}),label:`Version ${e}`}):t.createElement(t.Fragment,null)}},70148:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/data_validation-580f8b2cfe7683be30a199f706892039.png"}}]);