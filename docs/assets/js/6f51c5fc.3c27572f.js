"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[32798],{83166:(e,t,a)=>{var n=a(64836);t.Z=void 0;var r=n(a(64938)),l=a(85893),s=(0,r.default)((0,l.jsx)("path",{d:"M12 2 4 5v6.09c0 5.05 3.41 9.76 8 10.91 4.59-1.15 8-5.86 8-10.91V5l-8-3zm-1.06 13.54L7.4 12l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41-5.64 5.66z"}),"GppGood");t.Z=s},32238:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>k,default:()=>b,frontMatter:()=>c,metadata:()=>N,toc:()=>h});var n=a(3905),r=a(49044),l=Object.defineProperty,s=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,u=(e,t,a)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,d=(e,t)=>{for(var a in t||(t={}))p.call(t,a)&&u(e,a,t[a]);if(i)for(var a of i(t))m.call(t,a)&&u(e,a,t[a]);return e};const c={id:"jsonprocess",title:"JSON.PROCESS",hide_title:!0},k=void 0,N={unversionedId:"functions/streamsheet/jsonprocess",id:"functions/streamsheet/jsonprocess",title:"JSON.PROCESS",description:"JSON.PROCESS",source:"@site/streamsheets/functions/streamsheet/jsonprocess.md",sourceDirName:"functions/streamsheet",slug:"/functions/streamsheet/jsonprocess",permalink:"/documentation-staging/streamsheets/next/functions/streamsheet/jsonprocess",draft:!1,tags:[],version:"current",frontMatter:{id:"jsonprocess",title:"JSON.PROCESS",hide_title:!0},sidebar:"someSidebar",previous:{title:"JSON",permalink:"/documentation-staging/streamsheets/next/functions/streamsheet/json"},next:{title:"JSON.TO.RANGE",permalink:"/documentation-staging/streamsheets/next/functions/streamsheet/jsontorange"}},g={},h=[],f={toc:h};function b(e){var t,a=e,{components:l}=a,u=((e,t)=>{var a={};for(var n in e)p.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&m.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=d(d({},f),u),s(t,o({components:l,mdxType:"MDXLayout"}))),(0,n.kt)("h1",null,"JSON.PROCESS"),(0,n.kt)(r.Z,{mdxType:"PremiumFeature"}),(0,n.kt)("p",null,"Traverses given JSON object and processes each cell in specified cell-range. Before the cell-range is processed the current JSON value is written to defined value cell, whereas the corresponding key is returned from the function itself. A nested JSON can be completely traversed by setting the optional recursive parameter to TRUE. To immediately stop the JSON traversal use ",(0,n.kt)("a",d({parentName:"p"},{href:"../../functions/streamsheet/break"}),"BREAK()")," in processed cell-range."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Syntax")),(0,n.kt)("p",null,"=JSON.PROCESS(JSON, ValueCell, CellRange, ","[","Recursive","]",")"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),"JSON"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"JSON"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"A JSON object to process.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),"ValueCell"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"Cell"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"Cell-reference to write current JSON value to.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),"CellRange"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"Range"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"Cell-range to process for each JSON value.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),"Recursive (optional)"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"Boolean"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"Specify TRUE to completely traverse a nested JSON object. ",(0,n.kt)("br",null),(0,n.kt)("br",null),"Default value: FALSE")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Return")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),"String or Error"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"Currently processed JSON key or an ",(0,n.kt)("a",d({parentName:"td"},{href:"/documentation-staging/streamsheets/next/other/errorcodes"}),"error")," value.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Examples")),(0,n.kt)("p",null,"Traverse simple JSON and process specified cell-range:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",d({parentName:"tr"},{align:null})),(0,n.kt)("th",d({parentName:"tr"},{align:null}),"A"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),"1"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),'{"name": "foo", "age": 42 }')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),"2"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),'=CONCAT(A2, A4, "-")')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),"3"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),'=CONCAT(A3, B3, "-")')))),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Formula"),(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Result"),(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Comment"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),(0,n.kt)("pre",null,(0,n.kt)("code",null,"=JSON.PROCESS(JSON(A1), B3, A2:A3)"))),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"age"),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"Processes given cell-range for each JSON key-value pair. When finished A2 contains all the keys (",(0,n.kt)("inlineCode",{parentName:"td"},"-name-age-"),") and  A3 all the corresponding values (",(0,n.kt)("inlineCode",{parentName:"td"},"-foo-42-"),")")))))}b.isMDXComponent=!0},49044:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),r=a(74889),l=a(62659),s=a(83166);function o({}){return n.createElement(r.Z,{sx:{margin:"5px",color:"#ffffff",backgroundColor:l.Z[500]},size:"small",icon:n.createElement(s.Z,{style:{color:"white"},size:"small"}),label:"Premium"})}}}]);